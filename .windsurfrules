# Development Rules

- **ALWAYS** start replies with STARTER_CHARACTER + space (default: üü¢ (Green circle)).
- Stack emojis when requested, don't replace.  
- **ALWAYS** Re-read these instructions after every large chunk of work you complete. When you re-read this file, say `üü¢ Main rules re-read`

Each Markdown section below represents a step in the development workflow and has its own starting character:

## ‚úã Manual Steps (Hand)

- STARTER_CHARACTER = ‚úã
- When user asks for manual steps use this step.
- Stack emojis when doing code changes for this step.

## üéØ Planning

- STARTER_CHARACTER = üéØ (Target)

### 1. Planning Phase

- Present complete implementation plan
- Get explicit approval before proceeding
- Break down complex tasks into smaller, testable units
- Avoid mixing phases like planning, designing, coding, testing, and version control
- Avoid mixing refactoring with feature changes

## ‚úèÔ∏è Designing

- STARTER_CHARACTER = ‚úèÔ∏è (Pencil)

### 1. Architecture

- Prefer dependency injection
- Use Value Objects for domain concepts

### 2. Design Patterns

- Paradigm: Object Oriented, always create a class
- Prefer: Dependency Injection, Command, Builder, Factory, Strategy
- Domain Driven Design: First Class Collection, Value Object
- Avoid: global variables, static methods, Singletons

### 3. Method Design

- Single responsibility principle

### 4. Class Design

- Interfaces: Define contracts
- Fields: Private with minimal getters/setters
- Accept Optional dependencies in constructors with lazy initialization
- Use pattern: `param or DefaultClass()` for optional dependencies

### 5. Separation of Concerns

- Separate argument parsing, configuration, and dependency injection
- Dedicated classes for specific responsibilities
- Separate file system operations and business logic

### 6. Value Objects

- Immutability: Required
- Use `@dataclass(frozen=True)` for value objects
- Provide immutable update methods that return new instances
- Equality semantics: Based on identity fields

## üíª Python Code

- STARTER_CHARACTER = üíª (Laptop)

### 0. Code Change Workflow

- Make one logical change at a time
- Run tests after each change
- Check for and fix all warnings
- Present changes in small, reviewable chunks
- Get approval for each change set
- Review changes before committing
- Stop after each step

### 1. Code Style

- Indentation: 4 spaces
- Max line length: 120
- Charset: ISO-8859-1
- One class per file

### 2. Naming Conventions

- Classes: PascalCase
- Interfaces: PascalCase (ends with 'able')
- Collection naming: Use plural or descriptive names
- Methods: lowercase with underscore (use verbs)
- Variables: lowercase with underscore
- Constants: UPPER_SNAKE_CASE
- Module (file) naming: lowercase with underscore

### 3. Code Quality

- Maximum method length: 10 lines
- Maximum class length: 100 lines

### 4. Error and Null Handling

- Use optional parameters or Null Objects for None handling
- Exception types: Use specific exception types
- Error messages: Include context

### 5. Resource Management

- Use context managers (with statements)
- Document resource ownership

### 6. Configuration

- Prefer external configuration
- Use type-safe config

### 7. Documentation

- Remove ALL comments and docstrings from classes and methods
- Do add module-level docstrings
- Omit inferred API comments
- Keep single line comments to a minimum

**IMPORTANT** DO NOT COMMENT CODE, even if comments already present. Communicate meaning by writing clean, expressive code.

## ‚úÖ Testing

- STARTER_CHARACTER = ‚úÖ (Check mark)

### 1. Test Structure

- Framework: pytest
- Test modules: Same name as module under test prefixed with `test_`
- Test methods: `test_StateUnderTest_Act_ExpectedBehavior`
- If there are tests, run them

### 2. Test Principles

- Write tests first, then implementation
- Keep tests independent and fast
- Run tests after each change
- Ensure tests cover edge cases

## üå≥ Version Control

- STARTER_CHARACTER = üå≥ (Tree)

### 1. Git Hygiene

- Check for uncommitted changes before starting
- Prompt user to commit or revert changes if working directory is not clean
- Review changes before committing
- Commit after each logical change
- Write clear, descriptive commit messages
- Prefix all AI-generated commits with "(ai)"

## üîß Environment and Tools

- STARTER_CHARACTER = üîß (Wrench)
- OS: Windows
- Shell: CMD.exe
- Capabilities: Basic batch commands only
- Python version: 3.9
- Source Layout: Standard Python project layout
- `src/` for source code
- `test/` for test files
- Line Endings: CRLF
- Encoding: Latin-1/ISO-8859-1 unless `.windsurfrules` which is UTF-8
